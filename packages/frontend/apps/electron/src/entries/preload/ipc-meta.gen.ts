// AUTO-GENERATED FILE. DO NOT EDIT MANUALLY.
// Generated by: packages/frontend/apps/electron/scripts/generate-types.ts
/* eslint-disable @typescript-eslint/no-explicit-any */
export const handlersMeta = {
  "helper": {
    "dialog": [
      "setFakeDialogResult",
      "saveDBFileAs",
      "loadDBFile",
      "selectDBFileLocation"
    ],
    "nbstore": [
      "connect",
      "disconnect",
      "pushUpdate",
      "getDocSnapshot",
      "setDocSnapshot",
      "getDocUpdates",
      "markUpdatesMerged",
      "deleteDoc",
      "getDocClocks",
      "getDocClock",
      "getBlob",
      "setBlob",
      "deleteBlob",
      "releaseBlobs",
      "listBlobs",
      "getPeerRemoteClocks",
      "getPeerRemoteClock",
      "setPeerRemoteClock",
      "getPeerPulledRemoteClocks",
      "getPeerPulledRemoteClock",
      "setPeerPulledRemoteClock",
      "getPeerPushedClocks",
      "getPeerPushedClock",
      "setPeerPushedClock",
      "clearClocks",
      "setBlobUploadedAt",
      "getBlobUploadedAt"
    ],
    "workspace": [
      "deleteWorkspace",
      "moveToTrash",
      "getBackupWorkspaces",
      "deleteBackupWorkspace"
    ],
    "db": [
      "getDocAsUpdates",
      "getDocTimestamps",
      "getBlob",
      "getBlobKeys"
    ]
  },
  "main": {
    "findInPage": [
      "find",
      "clear"
    ],
    "ui": [
      "handleCloseApp",
      "restartApp",
      "onLanguageChange",
      "captureArea",
      "writeImageToClipboard",
      "getChallengeResponse",
      "openExternal",
      "openThemeEditor",
      "showMainWindow",
      "handleThemeChange",
      "isFullScreen",
      "isMaximized",
      "handleMinimizeApp",
      "handleHideApp",
      "handleMaximizeApp",
      "handleWindowResize",
      "isActiveTab",
      "getWorkbenchMeta",
      "updateWorkbenchMeta",
      "getTabViewsMeta",
      "getTabsStatus",
      "addTab",
      "showTab",
      "tabGoTo",
      "closeTab",
      "activateView",
      "moveTab",
      "toggleRightSidebar",
      "pingAppLayoutReady",
      "showTabContextMenu",
      "updateActiveViewMeta"
    ],
    "recording": [
      "setupRecordingFeature",
      "askForScreenRecordingPermission",
      "getRecording",
      "getCurrentRecording",
      "startRecording",
      "stopRecording",
      "pauseRecording",
      "resumeRecording",
      "removeRecording",
      "readyRecording",
      "handleBlockCreationSuccess",
      "handleBlockCreationFailed",
      "disableRecordingFeature",
      "getRawAudioBuffers",
      "checkRecordingAvailable",
      "checkMeetingPermissions",
      "checkCanRecordMeeting",
      "askForMeetingPermission",
      "showRecordingPermissionSetting",
      "showSavedRecordings"
    ],
    "sharedStorage": [
      "getAllGlobalState",
      "setGlobalState",
      "delGlobalState",
      "clearGlobalState",
      "getAllGlobalCache",
      "setGlobalCache",
      "delGlobalCache",
      "clearGlobalCache"
    ],
    "updater": [
      "currentVersion",
      "quitAndInstall",
      "getConfig",
      "setConfig",
      "checkForUpdates",
      "downloadUpdate"
    ],
    "popup": [
      "getCurrentNotification",
      "dismissCurrentNotification",
      "dismissCurrentRecording"
    ],
    "worker": [
      "connectWorker",
      "disconnectWorker"
    ]
  }
} as const;

export const eventsMeta = {
  "main": {
    "ui": [
      "authenticationRequest",
      "maximized",
      "fullScreen",
      "tabViewsMetaChange",
      "tabsStatusChange",
      "closeView",
      "tabAction",
      "activeTabChanged",
      "toggleRightSidebar",
      "tabShellViewActiveChange",
      "tabGoToRequest"
    ],
    "recording": [
      "recordingStatusChanged"
    ],
    "sharedStorage": [
      "globalStateChanged",
      "globalCacheChanged"
    ],
    "updater": [
      "updateAvailable",
      "updateReady",
      "downloadProgress"
    ],
    "menu": [
      "openInSettingModal",
      "newPageAction",
      "openJournal"
    ]
  }
} as const;
