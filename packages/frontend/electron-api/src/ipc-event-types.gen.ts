// AUTO-GENERATED FILE. DO NOT EDIT MANUALLY.
// Generated by: packages/frontend/apps/electron/scripts/generate-types.ts
/* eslint-disable @typescript-eslint/no-explicit-any */

import type { Observable } from 'rxjs';

type ToSubscribe<T extends Observable<unknown>> = T extends Observable<infer P> ? (callback: (payload: P) => void) => () => void : never;

export interface ElectronEvents {
  ui: {
    /**
     * Emits when an authentication request is received via deep link.
     */
    onAuthenticationRequest: ToSubscribe<import('@affine/electron/entries/main/misc/deep-link.service').DeepLinkService['authenticationRequest$']>;
    onMaximized: ToSubscribe<import('@affine/electron/entries/main/windows/main-window.service').MainWindowManager['maximized$']>;
    onFullScreen: ToSubscribe<import('@affine/electron/entries/main/windows/main-window.service').MainWindowManager['fullScreen$']>;
    onTabViewsMetaChange: ToSubscribe<import('@affine/electron/entries/main/windows/tab-views.service').TabViewsManager['tabViewsMeta$']>;
    onTabsStatusChange: ToSubscribe<import('@affine/electron/entries/main/windows/tab-views.service').TabViewsManager['tabsStatus$']>;
    onCloseView: ToSubscribe<import('@affine/electron/entries/main/windows/tab-views.service').TabViewsManager['closeView$']>;
    /**
     * Emits whenever a tab action is triggered.
     */
    onTabAction: ToSubscribe<import('@affine/electron/entries/main/windows/tab-views.service').TabViewsManager['tabAction$']>;
    onActiveTabChanged: ToSubscribe<import('@affine/electron/entries/main/windows/tab-views.service').TabViewsManager['activeWorkbenchId$']>;
    onToggleRightSidebar: ToSubscribe<import('@affine/electron/entries/main/windows/tab-views.service').TabViewsIpcRegistry['toggleRightSidebar$']>;
    onTabShellViewActiveChange: ToSubscribe<import('@affine/electron/entries/main/windows/tab-views.service').TabViewsIpcRegistry['tabShellViewActiveChange$']>;
    onTabGoToRequest: ToSubscribe<import('@affine/electron/entries/main/windows/tab-views.service').TabViewsIpcRegistry['tabGoToRequest$']>;
  };
  recording: {
    onRecordingStatusChanged: ToSubscribe<import('@affine/electron/entries/main/recording/recording.service').RecordingManager['recordingStatusChanged$']>;
  };
  sharedStorage: {
    onGlobalStateChanged: ToSubscribe<import('@affine/electron/entries/main/storage/storage.service').GlobalStateStorage['globalStateChanged$']>;
    onGlobalCacheChanged: ToSubscribe<import('@affine/electron/entries/main/storage/storage.service').GlobalCacheStorage['globalCacheChanged$']>;
  };
  updater: {
    onUpdateAvailable: ToSubscribe<import('@affine/electron/entries/main/updater/updater-manager.service').UpdaterManagerService['updateAvailable$']>;
    onUpdateReady: ToSubscribe<import('@affine/electron/entries/main/updater/updater-manager.service').UpdaterManagerService['updateReady$']>;
    onDownloadProgress: ToSubscribe<import('@affine/electron/entries/main/updater/updater-manager.service').UpdaterManagerService['downloadProgress$']>;
  };
  menu: {
    onOpenInSettingModal: ToSubscribe<import('@affine/electron/entries/main/windows/application-menu.service').ApplicationMenuManager['openInSettingModal$']>;
    onNewPageAction: ToSubscribe<import('@affine/electron/entries/main/windows/application-menu.service').ApplicationMenuManager['newPageAction$']>;
    onOpenJournal: ToSubscribe<import('@affine/electron/entries/main/windows/application-menu.service').ApplicationMenuManager['openJournal$']>;
  };
}
